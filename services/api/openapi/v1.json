{
  "openapi": "3.0.3",
  "info": {
    "title": "Flow API",
    "description": "# Flow API v1.0.0\n\n## Overview\nFlow API is a comprehensive habit tracking and personal development platform backend service. It provides secure, scalable endpoints for managing user flows, entries, activities, and synchronization across multiple devices.\n\n## Key Features\n- üîê **Firebase Authentication Integration** - Secure JWT-based authentication\n- üìä **Flow Management** - Create, track, and manage personal habits and goals\n- üìù **Entry Tracking** - Log daily progress with quantitative and qualitative data\n- üìà **Analytics & Insights** - Comprehensive activity statistics and progress tracking\n- üîÑ **Offline Sync** - Robust offline-to-online synchronization system\n- ‚öôÔ∏è **User Settings** - Customizable preferences and privacy controls\n- üè• **Health Monitoring** - Real-time service health and performance metrics\n\n## Security\n- Bearer token authentication (JWT)\n- Rate limiting (100 requests/minute)\n- Input validation and sanitization\n- CORS protection\n- SQL injection prevention\n- XSS protection\n\n## Rate Limits\n- **General API**: 100 requests per minute per IP\n- **Authentication**: 10 requests per minute per IP\n- **Sync Operations**: 50 requests per minute per user\n\n## Support\nFor API support, please contact our development team or refer to the documentation.",
    "version": "1.0.0",
    "contact": {
      "name": "Flow API Support Team",
      "email": "api-support@flow.app",
      "url": "https://flow.app/support"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "termsOfService": "https://flow.app/terms"
  },
  "servers": [
    {
      "url": "https://flow-api-891963913698.us-central1.run.app",
      "description": "Production Environment - Google Cloud Run",
      "variables": {
        "environment": {
          "default": "production",
          "enum": [
            "production"
          ],
          "description": "Production environment with full monitoring and logging"
        }
      }
    },
    {
      "url": "https://staging-flow-api-891963913698.us-central1.run.app",
      "description": "Staging Environment - Google Cloud Run",
      "variables": {
        "environment": {
          "default": "staging",
          "enum": [
            "staging"
          ],
          "description": "Staging environment for testing and validation"
        }
      }
    },
    {
      "url": "http://localhost:4000",
      "description": "Local Development Environment",
      "variables": {
        "environment": {
          "default": "development",
          "enum": [
            "development"
          ],
          "description": "Local development environment with debug endpoints enabled"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from Firebase Authentication. Include the token in the Authorization header as \"Bearer {token}\".",
        "example": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..."
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for service-to-service authentication (internal use only)",
        "example": "flow-api-key-12345"
      }
    },
    "schemas": {
      "Flow": {
        "type": "object",
        "required": [
          "id",
          "title",
          "trackingType",
          "frequency",
          "ownerId"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "maxLength": 500
          },
          "trackingType": {
            "type": "string",
            "enum": [
              "Binary",
              "Quantitative",
              "Time-based"
            ]
          },
          "frequency": {
            "type": "string",
            "enum": [
              "Daily",
              "Weekly",
              "Monthly"
            ]
          },
          "everyDay": {
            "type": "boolean"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Sun",
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat"
              ]
            }
          },
          "reminderTime": {
            "type": "string",
            "format": "date-time"
          },
          "reminderLevel": {
            "type": "string",
            "enum": [
              "1",
              "2",
              "3"
            ]
          },
          "cheatMode": {
            "type": "boolean"
          },
          "planId": {
            "type": "string"
          },
          "goal": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "number",
                  "duration",
                  "count"
                ]
              },
              "value": {
                "type": "number"
              },
              "unit": {
                "type": "string"
              }
            }
          },
          "progressMode": {
            "type": "string",
            "enum": [
              "sum",
              "average",
              "latest"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 30
            },
            "maxItems": 10
          },
          "archived": {
            "type": "boolean"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "private",
              "friends",
              "public"
            ]
          },
          "ownerId": {
            "type": "string"
          },
          "schemaVersion": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "FlowEntry": {
        "type": "object",
        "required": [
          "id",
          "flowId",
          "date",
          "symbol"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "flowId": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "symbol": {
            "type": "string",
            "enum": [
              "+",
              "-",
              "*",
              "/"
            ]
          },
          "emotion": {
            "type": "string"
          },
          "moodScore": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5
          },
          "note": {
            "type": "string",
            "maxLength": 1000
          },
          "quantitative": {
            "type": "object",
            "properties": {
              "unitText": {
                "type": "string"
              },
              "count": {
                "type": "number"
              }
            }
          },
          "timebased": {
            "type": "object",
            "properties": {
              "totalDuration": {
                "type": "number"
              }
            }
          },
          "device": {
            "type": "string",
            "enum": [
              "mobile",
              "web",
              "api"
            ]
          },
          "geo": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "minimum": -90,
                "maximum": 90
              },
              "lng": {
                "type": "number",
                "minimum": -180,
                "maximum": 180
              },
              "accuracy": {
                "type": "number",
                "minimum": 0
              }
            }
          },
          "streakCount": {
            "type": "integer",
            "minimum": 0
          },
          "edited": {
            "type": "boolean"
          },
          "editedBy": {
            "type": "string"
          },
          "editedAt": {
            "type": "string",
            "format": "date-time"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "schemaVersion": {
            "type": "integer"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "non-binary",
              "transgender",
              "prefer-not-to-say",
              "other"
            ]
          },
          "race": {
            "type": "string",
            "enum": [
              "american-indian",
              "asian",
              "black",
              "hispanic",
              "native-hawaiian",
              "white",
              "multiracial",
              "prefer-not-to-say",
              "other"
            ]
          },
          "disability": {
            "type": "string",
            "enum": [
              "none",
              "visual",
              "hearing",
              "mobility",
              "cognitive",
              "mental-health",
              "chronic-illness",
              "prefer-not-to-say",
              "other"
            ]
          },
          "preferredLanguage": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "timezone": {
            "type": "string"
          },
          "healthGoals": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fitnessLevel": {
            "type": "string",
            "enum": [
              "beginner",
              "intermediate",
              "advanced",
              "expert"
            ]
          },
          "medicalConditions": {
            "type": "string"
          },
          "profileVisibility": {
            "type": "string",
            "enum": [
              "public",
              "friends",
              "private"
            ]
          },
          "dataSharing": {
            "type": "object",
            "properties": {
              "analytics": {
                "type": "boolean"
              },
              "research": {
                "type": "boolean"
              },
              "marketing": {
                "type": "boolean"
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserSettings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "notifications": {
            "type": "object",
            "properties": {
              "email": {
                "type": "boolean"
              },
              "push": {
                "type": "boolean"
              },
              "sms": {
                "type": "boolean"
              },
              "reminders": {
                "type": "boolean"
              },
              "achievements": {
                "type": "boolean"
              },
              "weeklyReports": {
                "type": "boolean"
              }
            }
          },
          "privacy": {
            "type": "object",
            "properties": {
              "profileVisibility": {
                "type": "string",
                "enum": [
                  "public",
                  "friends",
                  "private"
                ]
              },
              "showStats": {
                "type": "boolean"
              },
              "showFlows": {
                "type": "boolean"
              },
              "allowFriendRequests": {
                "type": "boolean"
              }
            }
          },
          "preferences": {
            "type": "object",
            "properties": {
              "theme": {
                "type": "string",
                "enum": [
                  "light",
                  "dark",
                  "auto"
                ]
              },
              "language": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "dateFormat": {
                "type": "string"
              },
              "timeFormat": {
                "type": "string",
                "enum": [
                  "12h",
                  "24h"
                ]
              }
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {},
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {}
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer"
              },
              "limit": {
                "type": "integer"
              },
              "total": {
                "type": "integer"
              },
              "totalPages": {
                "type": "integer"
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "success",
          "error",
          "message"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false,
            "description": "Always false for error responses"
          },
          "error": {
            "type": "string",
            "description": "Error type or code",
            "examples": {
              "VALIDATION_ERROR": "Input validation failed",
              "AUTHENTICATION_ERROR": "Authentication failed",
              "AUTHORIZATION_ERROR": "Insufficient permissions",
              "NOT_FOUND": "Resource not found",
              "RATE_LIMIT_EXCEEDED": "Rate limit exceeded",
              "INTERNAL_ERROR": "Internal server error"
            }
          },
          "message": {
            "type": "string",
            "description": "Human-readable error message",
            "example": "The request could not be processed due to validation errors"
          },
          "details": {
            "type": "object",
            "description": "Additional error details",
            "properties": {
              "field": {
                "type": "string",
                "description": "Field that caused the error"
              },
              "code": {
                "type": "string",
                "description": "Specific error code"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "requestId": {
                "type": "string",
                "description": "Unique request identifier for debugging"
              }
            }
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "When the error occurred"
          },
          "requestId": {
            "type": "string",
            "description": "Unique request identifier for debugging and support"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "required": [
          "success",
          "error",
          "message",
          "validationErrors"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "VALIDATION_ERROR"
          },
          "message": {
            "type": "string",
            "example": "Request validation failed"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field name that failed validation"
                },
                "message": {
                  "type": "string",
                  "description": "Validation error message"
                },
                "value": {
                  "description": "The invalid value that was provided"
                },
                "constraint": {
                  "type": "string",
                  "description": "The validation rule that failed"
                }
              }
            }
          }
        }
      },
      "RateLimitError": {
        "type": "object",
        "required": [
          "success",
          "error",
          "message",
          "retryAfter"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "string",
            "example": "RATE_LIMIT_EXCEEDED"
          },
          "message": {
            "type": "string",
            "example": "Too many requests from this IP address"
          },
          "retryAfter": {
            "type": "integer",
            "description": "Seconds to wait before retrying",
            "example": 60
          },
          "limit": {
            "type": "integer",
            "description": "Request limit per time window",
            "example": 100
          },
          "remaining": {
            "type": "integer",
            "description": "Remaining requests in current window",
            "example": 0
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "API root endpoint",
        "description": "Get API information and version",
        "tags": [
          "root"
        ],
        "responses": {
          "200": {
            "description": "API information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "version": {
                      "type": "string"
                    },
                    "docs": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Comprehensive health check endpoint for Cloud Run monitoring",
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "description": "Service is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "uptime": {
                      "type": "number"
                    },
                    "version": {
                      "type": "string"
                    },
                    "environment": {
                      "type": "string"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "object"
                        },
                        "redis": {
                          "type": "object"
                        },
                        "scheduler": {
                          "type": "object"
                        }
                      }
                    },
                    "metrics": {
                      "type": "object",
                      "properties": {
                        "memory": {
                          "type": "object"
                        },
                        "cpu": {
                          "type": "object"
                        }
                      }
                    },
                    "responseTime": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate user with Firebase token",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "idToken"
                ],
                "properties": {
                  "idToken": {
                    "type": "string",
                    "description": "Firebase ID token"
                  },
                  "refreshToken": {
                    "type": "string",
                    "description": "Firebase refresh token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/schemas/User"
                            },
                            "accessToken": {
                              "type": "string"
                            },
                            "refreshToken": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/flows": {
      "get": {
        "summary": "Get user flows",
        "description": "Get paginated list of flows for the authenticated user",
        "tags": [
          "flows"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Items per page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "Filter archived flows",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Flows retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Flow"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new flow",
        "description": "Create a new flow for the authenticated user",
        "tags": [
          "flows"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "trackingType",
                  "frequency"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 100
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "trackingType": {
                    "type": "string",
                    "enum": [
                      "Binary",
                      "Quantitative",
                      "Time-based"
                    ]
                  },
                  "frequency": {
                    "type": "string",
                    "enum": [
                      "Daily",
                      "Weekly",
                      "Monthly"
                    ]
                  },
                  "everyDay": {
                    "type": "boolean"
                  },
                  "daysOfWeek": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                      ]
                    }
                  },
                  "reminderTime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "reminderLevel": {
                    "type": "string",
                    "enum": [
                      "1",
                      "2",
                      "3"
                    ]
                  },
                  "cheatMode": {
                    "type": "boolean"
                  },
                  "planId": {
                    "type": "string"
                  },
                  "goal": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "number",
                          "duration",
                          "count"
                        ]
                      },
                      "value": {
                        "type": "number"
                      },
                      "unit": {
                        "type": "string"
                      }
                    }
                  },
                  "progressMode": {
                    "type": "string",
                    "enum": [
                      "sum",
                      "average",
                      "latest"
                    ]
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "maxLength": 30
                    },
                    "maxItems": 10
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "private",
                      "friends",
                      "public"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Flow created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ApiResponse"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "$ref": "#/components/schemas/Flow"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "root",
      "description": "Root API endpoint and service information",
      "externalDocs": {
        "description": "API Documentation",
        "url": "https://flow.app/docs/api"
      }
    },
    {
      "name": "health",
      "description": "Health monitoring and service status endpoints for production monitoring",
      "externalDocs": {
        "description": "Monitoring Guide",
        "url": "https://flow.app/docs/monitoring"
      }
    },
    {
      "name": "auth",
      "description": "Authentication and authorization endpoints using Firebase JWT tokens",
      "externalDocs": {
        "description": "Authentication Guide",
        "url": "https://flow.app/docs/authentication"
      }
    },
    {
      "name": "flows",
      "description": "Habit and goal management including creation, tracking, and analytics",
      "externalDocs": {
        "description": "Flow Management",
        "url": "https://flow.app/docs/flows"
      }
    }
  ]
}