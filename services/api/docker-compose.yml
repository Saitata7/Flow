version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: flow-postgres
    environment:
      POSTGRES_DB: flow
      POSTGRES_USER: flow_user
      POSTGRES_PASSWORD: flow_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flow_user -d flow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flow-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: flow-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - flow-network

  # Flow API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flow-api
    environment:
      NODE_ENV: development
      PORT: 4000
      HOST: 0.0.0.0
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: flow
      DB_USER: flow_user
      DB_PASSWORD: flow_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      REDIS_DB: 0
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      
      # Firebase Configuration (optional)
      FIREBASE_PROJECT_ID: ${FIREBASE_PROJECT_ID:-}
      FIREBASE_PRIVATE_KEY: ${FIREBASE_PRIVATE_KEY:-}
      FIREBASE_CLIENT_EMAIL: ${FIREBASE_CLIENT_EMAIL:-}
      
      # Auth Provider
      AUTH_PROVIDER: ${AUTH_PROVIDER:-jwt-only}
      
      # API Keys
      VALID_API_KEYS: ${VALID_API_KEYS:-flow-api-key-123,flow-service-key-456}
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - flow-network
    restart: unless-stopped

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flow-migrate
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: flow
      DB_USER: flow_user
      DB_PASSWORD: flow_password
    command: ["npm", "run", "migrate", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - flow-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  flow-network:
    driver: bridge
