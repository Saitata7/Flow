# Cloud Build configuration for Flow API deployment
# This file defines the build and deployment pipeline for the API service

steps:
  # Step 1: Build and push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:${SHORT_SHA}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:latest'
      - '-f'
      - 'services/api/Dockerfile'
      - 'services/api'
    id: 'build-api-image'

  # Step 2: Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:${SHORT_SHA}'
    id: 'push-api-image-sha'
    waitFor: ['build-api-image']

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:latest'
    id: 'push-api-image-latest'
    waitFor: ['build-api-image']

  # Step 3: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'flow-api'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--memory'
      - '1Gi'
      - '--cpu'
      - '1'
      - '--min-instances'
      - '0'
      - '--max-instances'
      - '10'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '300'
      - '--set-env-vars'
      - 'NODE_ENV=production,PORT=8080,HOST=0.0.0.0'
      - '--set-secrets'
      - 'DATABASE_URL=database-url:latest,REDIS_HOST=redis-host:latest,REDIS_PASSWORD=redis-password:latest,JWT_SECRET=jwt-secret:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest,FIREBASE_PRIVATE_KEY=firebase-private-key:latest,FIREBASE_CLIENT_EMAIL=firebase-client-email:latest'
      - '--set-cloudsql-instances'
      - '${PROJECT_ID}:${_REGION}:${_CLOUD_SQL_INSTANCE}'
    id: 'deploy-api'
    waitFor: ['push-api-image-sha']

  # Step 4: Run database migrations
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'jobs'
      - 'create'
      - 'flow-api-migrate'
      - '--image'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_ARTIFACT_REGISTRY_REPO}/flow-api:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--set-env-vars'
      - 'NODE_ENV=production'
      - '--set-secrets'
      - 'DATABASE_URL=database-url:latest'
      - '--set-cloudsql-instances'
      - '${PROJECT_ID}:${_REGION}:${_CLOUD_SQL_INSTANCE}'
      - '--command'
      - 'node'
      - '--args'
      - 'migrations/migrate.js'
      - '--max-retries'
      - '3'
      - '--parallelism'
      - '1'
      - '--task-count'
      - '1'
    id: 'create-migrate-job'
    waitFor: ['deploy-api']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'jobs'
      - 'execute'
      - 'flow-api-migrate'
      - '--region'
      - '${_REGION}'
      - '--wait'
    id: 'run-migrations'
    waitFor: ['create-migrate-job']

  # Step 5: Smoke test
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe flow-api --region=${_REGION} --format='value(status.url)')
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 30
        
        # Run smoke tests
        echo "Running smoke tests against $$SERVICE_URL"
        
        # Test health endpoint
        curl -f "$$SERVICE_URL/health" || exit 1
        
        # Test API documentation
        curl -f "$$SERVICE_URL/docs" || exit 1
        
        # Test OpenAPI spec
        curl -f "$$SERVICE_URL/openapi.json" || exit 1
        
        echo "Smoke tests passed!"
    id: 'smoke-test'
    waitFor: ['run-migrations']

  # Step 6: Clean up old revisions (keep last 2)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get all revisions except the latest 2
        OLD_REVISIONS=$$(gcloud run revisions list --service=flow-api --region=${_REGION} --format='value(metadata.name)' --sort-by='~metadata.creationTimestamp' | tail -n +3)
        
        # Delete old revisions
        for revision in $$OLD_REVISIONS; do
          echo "Deleting old revision: $$revision"
          gcloud run revisions delete $$revision --region=${_REGION} --quiet || true
        done
    id: 'cleanup-old-revisions'
    waitFor: ['smoke-test']

# Substitution variables
substitutions:
  _REGION: 'us-central1'
  _ARTIFACT_REGISTRY_REPO: 'flow-repo'
  _CLOUD_SQL_INSTANCE: 'flow-db'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# Build timeout
timeout: '1200s'

# Service account for Cloud Build
serviceAccount: 'projects/${PROJECT_ID}/serviceAccounts/cloud-build@${PROJECT_ID}.iam.gserviceaccount.com'
