name: Deploy Flow API to GCP Cloud Run

on:
  push:
    branches: [ main ]
    paths:
      - 'services/api/**'
      - 'packages/data-models/**'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: flow-api
  ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY }}

jobs:
  # Test and Build
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd services/api
          npm ci

      - name: Run ESLint
        run: |
          cd services/api
          npm run lint

      - name: Run tests
        run: |
          cd services/api
          npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: flow_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ''
          JWT_SECRET: test-jwt-secret

      - name: Generate test coverage
        run: |
          cd services/api
          npm run test:coverage

  # Build and Push Docker Image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-build
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Build Docker image
        run: |
          cd services/api
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:$GITHUB_SHA .
          docker tag $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:$GITHUB_SHA $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:latest

      - name: Push Docker image
        run: |
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:$GITHUB_SHA
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:latest

  # Deploy to Cloud Run
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars PORT=8080 \
            --set-env-vars HOST=0.0.0.0 \
            --set-env-vars DB_HOST=${{ secrets.DB_HOST }} \
            --set-env-vars DB_NAME=${{ secrets.DB_NAME }} \
            --set-env-vars DB_USER=${{ secrets.DB_USER }} \
            --set-env-vars DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --set-env-vars REDIS_HOST=${{ secrets.REDIS_HOST }} \
            --set-env-vars REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} \
            --set-env-vars JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --set-env-vars FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} \
            --set-env-vars FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}" \
            --set-env-vars FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }} \
            --set-env-vars AUTH_PROVIDER=firebase \
            --set-env-vars VALID_API_KEYS=${{ secrets.VALID_API_KEYS }} \
            --set-env-vars CORS_ORIGIN=${{ secrets.CORS_ORIGIN }} \
            --set-env-vars LOG_LEVEL=info

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Service deployed at: $SERVICE_URL"

      - name: Run database migrations
        run: |
          # Run migrations using Cloud Run Jobs or Cloud Build
          gcloud run jobs create migrate-db \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --memory 512Mi \
            --cpu 1 \
            --task-timeout 600 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars DB_HOST=${{ secrets.DB_HOST }} \
            --set-env-vars DB_NAME=${{ secrets.DB_NAME }} \
            --set-env-vars DB_USER=${{ secrets.DB_USER }} \
            --set-env-vars DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            --command npm \
            --args run,migrate,up \
            || echo "Migration job already exists, updating..."
          
          gcloud run jobs replace - --region $REGION < <(
            gcloud run jobs describe migrate-db --region $REGION --format export
          ) || true
          
          gcloud run jobs execute migrate-db --region $REGION --wait

      - name: Health check
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "üîç Performing health check on: $SERVICE_URL/health"
          
          # Wait for service to be ready
          sleep 30
          
          # Health check with retries
          for i in {1..5}; do
            if curl -f "$SERVICE_URL/health"; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed (attempt $i/5), retrying in 10s..."
              sleep 10
            fi
          done

      - name: Update API SDK
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "üìù Updating API SDK with production URL: $SERVICE_URL"
          
          # Update the API SDK configuration
          cd packages/api-sdk
          echo "export const API_BASE_URL = '$SERVICE_URL/v1';" > src/config.js
          echo "// Auto-generated production config" >> src/config.js
          echo "// Generated on: $(date)" >> src/config.js

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, security-scan]
    if: always()
    
    steps:
      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
          echo "üöÄ Flow API deployed at: $SERVICE_URL"
          echo "üìö API Documentation: $SERVICE_URL/docs"
          echo "üîç Health Check: $SERVICE_URL/health"
