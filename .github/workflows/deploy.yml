name: Deploy to Google Cloud

on:
  push:
    branches: [main]
    paths:
      - 'services/api/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'
      - 'infra/**'
  pull_request:
    branches: [main]
    paths:
      - 'services/api/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'
      - 'infra/**'
  release:
    types: [published]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ARTIFACT_REGISTRY_REPO: flow-repo
  CLOUD_SQL_INSTANCE: flow-db
  SERVICE_NAME: flow-api

jobs:
  # Lint and test
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Run tests
        run: yarn test:ci

      - name: Run type checking
        run: yarn type-check

  # Build and push Docker image
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Build Docker image
        run: |
          cd services/api
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA .
          docker tag $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:latest

      - name: Push Docker image
        run: |
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:latest

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Deploy to Cloud Run (Staging)
        run: |
          gcloud run deploy $SERVICE_NAME-staging \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 1Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=staging,PORT=8080,HOST=0.0.0.0 \
            --set-secrets DATABASE_URL=database-url-staging:latest,REDIS_HOST=redis-host-staging:latest,REDIS_PASSWORD=redis-password-staging:latest,JWT_SECRET=jwt-secret-staging:latest \
            --set-cloudsql-instances $PROJECT_ID:$REGION:$CLOUD_SQL_INSTANCE-staging

      - name: Run database migrations (Staging)
        run: |
          gcloud run jobs create $SERVICE_NAME-migrate-staging \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --set-env-vars NODE_ENV=staging \
            --set-secrets DATABASE_URL=database-url-staging:latest \
            --set-cloudsql-instances $PROJECT_ID:$REGION:$CLOUD_SQL_INSTANCE-staging \
            --command node \
            --args migrations/migrate.js \
            --max-retries 3 \
            --parallelism 1 \
            --task-count 1

          gcloud run jobs execute $SERVICE_NAME-migrate-staging --region $REGION --wait

      - name: Smoke test (Staging)
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region $REGION --format='value(status.url)')
          echo "Testing staging service at $SERVICE_URL"
          
          # Wait for service to be ready
          sleep 30
          
          # Test health endpoint
          curl -f "$SERVICE_URL/health" || exit 1
          
          # Test API documentation
          curl -f "$SERVICE_URL/docs" || exit 1
          
          echo "Staging smoke tests passed!"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Deploy to Cloud Run (Production)
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 20 \
            --concurrency 80 \
            --timeout 300 \
            --set-env-vars NODE_ENV=production,PORT=8080,HOST=0.0.0.0 \
            --set-secrets DATABASE_URL=database-url:latest,REDIS_HOST=redis-host:latest,REDIS_PASSWORD=redis-password:latest,JWT_SECRET=jwt-secret:latest,FIREBASE_PROJECT_ID=firebase-project-id:latest,FIREBASE_PRIVATE_KEY=firebase-private-key:latest,FIREBASE_CLIENT_EMAIL=firebase-client-email:latest \
            --set-cloudsql-instances $PROJECT_ID:$REGION:$CLOUD_SQL_INSTANCE

      - name: Run database migrations (Production)
        run: |
          gcloud run jobs create $SERVICE_NAME-migrate \
            --image $REGION-docker.pkg.dev/$PROJECT_ID/$ARTIFACT_REGISTRY_REPO/$SERVICE_NAME:$GITHUB_SHA \
            --region $REGION \
            --set-env-vars NODE_ENV=production \
            --set-secrets DATABASE_URL=database-url:latest \
            --set-cloudsql-instances $PROJECT_ID:$REGION:$CLOUD_SQL_INSTANCE \
            --command node \
            --args migrations/migrate.js \
            --max-retries 3 \
            --parallelism 1 \
            --task-count 1

          gcloud run jobs execute $SERVICE_NAME-migrate --region $REGION --wait

      - name: Smoke test (Production)
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')
          echo "Testing production service at $SERVICE_URL"
          
          # Wait for service to be ready
          sleep 30
          
          # Test health endpoint
          curl -f "$SERVICE_URL/health" || exit 1
          
          # Test API documentation
          curl -f "$SERVICE_URL/docs" || exit 1
          
          # Test OpenAPI spec
          curl -f "$SERVICE_URL/openapi.json" || exit 1
          
          echo "Production smoke tests passed!"

      - name: Clean up old revisions
        run: |
          # Get all revisions except the latest 2
          OLD_REVISIONS=$(gcloud run revisions list --service=$SERVICE_NAME --region=$REGION --format='value(metadata.name)' --sort-by='~metadata.creationTimestamp' | tail -n +3)
          
          # Delete old revisions
          for revision in $OLD_REVISIONS; do
            echo "Deleting old revision: $revision"
            gcloud run revisions delete $revision --region=$REGION --quiet || true
          done

      - name: Update deployment status
        run: |
          echo "âœ… Production deployment completed successfully!"
          echo "Service URL: $(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')"

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Run performance tests
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME-staging --region $REGION --format='value(status.url)')
          echo "Running performance tests against $SERVICE_URL"
          
          # Simple load test using curl
          for i in {1..10}; do
            curl -w "Time: %{time_total}s\n" -o /dev/null -s "$SERVICE_URL/health"
          done
          
          echo "Performance tests completed!"

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, security-scan, performance-test]
    if: always() && github.event_name == 'release'
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
